import { ApiKeyService } from "./ApiKeyService";

/**
 * Service g·ªçi Gemini API ƒë·ªÉ ph√¢n t√≠ch requirements
 */
export class GeminiService {
    private apiKeyService = new ApiKeyService();

    /**
     * H√†m helper parse JSON an to√†n t·ª´ response LLM
     */
    private safeJsonParse(txt: string): any[] {
        try {
            return JSON.parse(txt);
        } catch {
            // Th·ª≠ t√¨m m·∫£ng JSON
            const arrayMatch = txt.match(/\[[\s\S]*\]/);
            if (arrayMatch) {
                try {
                    return JSON.parse(arrayMatch[0]);
                } catch { }
            }
            // Th·ª≠ parse object ƒë∆°n
            const objMatch = txt.match(/\{[\s\S]*\}/);
            if (objMatch) {
                try {
                    return [JSON.parse(objMatch[0])];
                } catch { }
            }
            console.error("‚ùå JSON parse failed. Raw text snippet:", txt.slice(0, 500));
            return [];
        }
    }

    /**
     * Sinh prompt chu·∫©n cho Gemini
     */
    private buildPrompt(cleanText: string): string {
        const schemaDescription = `B·∫ÆT BU·ªòC: CH·ªà tr·∫£ v·ªÅ JSON array h·ª£p l·ªá v√† KH√îNG G√å KH√ÅC. 
KH√îNG gi·∫£i th√≠ch, KH√îNG markdown, KH√îNG code fence, KH√îNG text th·ª´a.

Ph√¢n t√≠ch vƒÉn b·∫£n sau v√† CHUY·ªÇN TH√ÄNH DANH S√ÅCH (array) c√°c USE CASE C·ª¶A H·ªÜ TH·ªêNG PH·∫¶N M·ªÄM.
KH√îNG m√¥ t·∫£ nghi·ªáp v·ª• t·ªï ch·ª©c/h√†nh ch√≠nh ngo√†i ƒë·ªùi th·∫≠t, m√† ph·∫£i di·ªÖn ƒë·∫°t th√†nh ch·ª©c nƒÉng m√† PH·∫¶N M·ªÄM c·∫ßn h·ªó tr·ª£.

V√≠ d·ª•: thay v√¨ "C√°n b·ªô UBND xem x√©t ƒëi·ªÅu ch·ªânh quy ho·∫°ch", h√£y m√¥ t·∫£ th√†nh "Ng∆∞·ªùi d√πng n·ªôp h·ªì s∆° ƒëi·ªÅu ch·ªânh quy ho·∫°ch qua h·ªá th·ªëng" ho·∫∑c "H·ªá th·ªëng th·∫©m ƒë·ªãnh v√† ph√™ duy·ªát y√™u c·∫ßu ƒëi·ªÅu ch·ªânh".

M·ªói use case l√† m·ªôt object JSON v·ªõi c√°c tr∆∞·ªùng:
- id
- name (m√¥ t·∫£ ch·ª©c nƒÉng ph·∫ßn m·ªÅm, v√≠ d·ª•: "ƒêƒÉng nh·∫≠p h·ªá th·ªëng", "G·ª≠i y√™u c·∫ßu ph√™ duy·ªát")
- role (vai tr√≤ trong ph·∫ßn m·ªÅm: Ng∆∞·ªùi d√πng, Qu·∫£n tr·ªã vi√™n, C√°n b·ªô th·∫©m ƒë·ªãnh‚Ä¶)
- goal
- reason
- tasks[] (c√°c b∆∞·ªõc ph·∫ßn m·ªÅm c·∫ßn th·ª±c hi·ªán, kh√¥ng ph·∫£i th·ªß t·ª•c gi·∫•y t·ªù ngo√†i ƒë·ªùi)
- inputs[] (d·ªØ li·ªáu nh·∫≠p v√†o h·ªá th·ªëng)
- outputs[] (k·∫øt qu·∫£/ph·∫£n h·ªìi ph·∫ßn m·ªÅm cung c·∫•p)
- context
- priority ("low"|"medium"|"high")
- feedback
- rules[]
- triggers[]
- preconditions[]
- postconditions[]
- exceptions[]
- stakeholders[]
- constraints[]

Y√äU C·∫¶U QUAN TR·ªåNG:
- OUTPUT PH·∫¢I L√Ä JSON ARRAY H·ª¢P L·ªÜ C√ì TH·ªÇ PARSE ƒê∆Ø·ª¢C NGAY
- N·∫øu ch·ªâ c√≥ 1 use case th√¨ m·∫£ng v·∫´n c√≥ 1 ph·∫ßn t·ª≠
- C√°c tr∆∞·ªùng d·∫°ng danh s√°ch lu√¥n l√† m·∫£ng chu·ªói []
- Tr∆∞·ªùng related_usecases ph·∫£i l√† m·∫£ng chu·ªói, format "UCx: T√™n use case"
- Ch·ªâ t·∫≠p trung v√†o NGHI·ªÜP V·ª§ C·ª¶A PH·∫¶N M·ªÄM

`;

        return `${schemaDescription}\n\nVƒÉn b·∫£n ngu·ªìn:\n${cleanText}`;
    }

    // H√†m ƒë·ªÉ b·ªï sung related_usecases cho danh s√°ch use case 

    async addRelatedUseCases(
        useCases: any[],
        options?: { incremental?: boolean }
    ): Promise<any[]> {
        // ‚úÖ N·∫øu danh s√°ch tr·ªëng ho·∫∑c ch·ªâ c√≥ 1 use case th√¨ b·ªè qua
        if (!useCases || useCases.length <= 1) {
            console.log("‚è© B·ªè qua addRelatedUseCases v√¨ danh s√°ch qu√° √≠t use case.");
            return useCases;
        }

        // ‚úÖ R√∫t g·ªçn d·ªØ li·ªáu g·ª≠i sang Gemini (id + name + goal)
        const simplified = useCases.map((u) => ({
            id: u.id,
            name: u.name,
            goal: u.goal,
        }));

        const basePrompt = `
ƒê√¢y l√† danh s√°ch use case ph·∫ßn m·ªÅm ƒë√£ c√≥:
${JSON.stringify(simplified, null, 2)}

Nhi·ªám v·ª• c·ªßa b·∫°n:
${options?.incremental
                ? `- KH√îNG ƒë∆∞·ª£c x√≥a ho·∫∑c ghi ƒë√® related_usecases c≈©.
- Ch·ªâ b·ªï sung li√™n k·∫øt gi·ªØa use case m·ªõi v√† use case c≈©.`
                : `- Ph√¢n t√≠ch v√† sinh l·∫°i to√†n b·ªô related_usecases cho t·∫•t c·∫£ use case.`}

Y√äU C·∫¶U:
- related_usecases[] ch·ªâ tham chi·∫øu t·ªõi use case trong danh s√°ch tr√™n.
- Format: "UCx: T√™n use case".
- N·∫øu kh√¥ng c√≥ li√™n quan, ƒë·ªÉ m·∫£ng r·ªóng [].
- Tr·∫£ v·ªÅ to√†n b·ªô danh s√°ch use case v·ªõi related_usecases ƒë∆∞·ª£c c·∫≠p nh·∫≠t.
`;

        const keys = await this.apiKeyService.getAllActiveKeys("gemini");
        if (!keys || keys.length === 0) throw new Error("No active Gemini API key");

        for (const k of keys) {
            try {
                const { GoogleGenerativeAI } = await import("@google/generative-ai");
                const client = new GoogleGenerativeAI(k.key_value);
                const model = client.getGenerativeModel({ model: "gemini-2.0-flash" });

                const resp: any = await model.generateContent({
                    contents: [{ role: "user", parts: [{ text: basePrompt }] }],
                });

                const text: string = resp?.response?.text?.() || "[]";
                const parsed = this.safeJsonParse(text);

                // ‚úÖ N·∫øu parse ƒë∆∞·ª£c array ‚Üí g√°n related_usecases l·∫°i v√†o danh s√°ch g·ªëc
                if (Array.isArray(parsed)) {
                    const updated = useCases.map((u) => {
                        const match = parsed.find((p: any) => p.id === u.id);
                        return match ? { ...u, related_usecases: match.related_usecases || [] } : u;
                    });
                    return updated;
                }

                return useCases; // fallback n·∫øu parse l·ªói
            } catch (err: any) {
                console.error("‚ùå addRelatedUseCases error:", err);

                // ‚úÖ N·∫øu c√≥ RetryInfo ‚Üí delay tr∆∞·ªõc khi th·ª≠ key ti·∫øp theo
                const retryInfo = err?.errorDetails?.find(
                    (d: any) => d["@type"]?.includes("RetryInfo")
                );
                if (retryInfo?.retryDelay) {
                    const seconds = parseInt(retryInfo.retryDelay);
                    if (!isNaN(seconds) && seconds > 0) {
                        console.log(`‚è≥ ƒê·ª£i ${seconds}s tr∆∞·ªõc khi th·ª≠ key ti·∫øp theo...`);
                        await new Promise((resolve) => setTimeout(resolve, seconds * 1000));
                    }
                }

                continue; // th·ª≠ key ti·∫øp theo
            }
        }

        return useCases; // fallback n·∫øu t·∫•t c·∫£ key ƒë·ªÅu fail
    }



    /**
     * Ph√¢n t√≠ch text v·ªõi Gemini ‚Üí tr·∫£ v·ªÅ danh s√°ch use case
     */
    async analyzeRequirements(cleanText: string): Promise<any[]> {
        console.log(`üîç Analyzing text with Gemini. Text length: ${cleanText.length}`);
        console.log(`üìù Text preview: ${cleanText.slice(0, 200)}...`);

        const keys = await this.apiKeyService.getAllActiveKeys("gemini");
        if (!keys || keys.length === 0) {
            throw new Error("No active Gemini API key");
        }

        const prompt = this.buildPrompt(cleanText);
        let lastError: any;

        for (const k of keys) {
            const key = k.key_value;
            try {
                console.log(`üîë Trying Gemini key: ${key.slice(0, 10)}...`);

                const { GoogleGenerativeAI } = await import("@google/generative-ai");
                const client = new GoogleGenerativeAI(key);
                const model = client.getGenerativeModel({ model: "gemini-2.0-flash" });

                console.log(`üì§ Sending prompt to Gemini (${prompt.length} chars)...`);
                const resp: any = await model.generateContent({
                    contents: [{ role: "user", parts: [{ text: prompt }] }],
                });

                const text: string = resp?.response?.text?.() || "[]";
                console.log(`ü§ñ Gemini response length: ${text.length}`);
                console.log(`üìÑ Gemini response preview: ${text.slice(0, 500)}...`);

                const parsed = this.safeJsonParse(text);
                console.log(
                    `‚úÖ Parsed result: ${Array.isArray(parsed) ? parsed.length : "not array"} items`
                );

                return Array.isArray(parsed) ? parsed : parsed ? [parsed] : [];
            } catch (err: any) {
                const msg = err?.message?.toLowerCase() || "";
                console.error(`‚ùå Gemini key ${key.slice(0, 8)}... failed:`, err.message);

                if (msg.includes("invalid") || msg.includes("unauthorized")) {
                    await this.apiKeyService.disableKey(k._id);
                    console.warn(`‚ö†Ô∏è Disabled invalid Gemini key: ${key.slice(0, 8)}...`);
                }

                lastError = err;
                continue; // th·ª≠ key ti·∫øp theo
            }
        }

        throw lastError || new Error("All Gemini API keys failed");
    }

    // Check conflic
    async checkConflictWithGemini(textA: string, textB: string): Promise<boolean> {
        const prompt = `So s√°nh hai m√¥ t·∫£ use case sau:
A: "${textA}"
B: "${textB}"

Tr·∫£ l·ªùi duy nh·∫•t b·∫±ng JSON:
{ "conflict": true }  n·∫øu ch√∫ng TH·ª∞C S·ª∞ l√† c√πng m·ªôt use case (ch·ªâ kh√°c c√°ch vi·∫øt, nh∆∞ng c√πng √Ω nghƒ©a).
{ "conflict": false } n·∫øu ch√∫ng l√† hai use case kh√°c nhau (v√≠ d·ª•: "ƒêƒÉng nh·∫≠p" KH√ÅC "ƒêƒÉng k√Ω").`;

        const keys = await this.apiKeyService.getAllActiveKeys("gemini");
        if (!keys || keys.length === 0) {
            throw new Error("No active Gemini API key");
        }

        let lastError: any;
        for (const k of keys) {
            try {
                const { GoogleGenerativeAI } = await import("@google/generative-ai");
                const client = new GoogleGenerativeAI(k.key_value);
                const model = client.getGenerativeModel({ model: "gemini-2.0-flash" });

                const resp: any = await model.generateContent({
                    contents: [{ role: "user", parts: [{ text: prompt }] }],
                });

                const text: string = resp?.response?.text?.() || "{}";
                const parsed = JSON.parse(text.trim());

                if (typeof parsed.conflict === "boolean") {
                    return parsed.conflict;
                }
            } catch (err) {
                lastError = err;
                continue;
            }
        }

        throw lastError || new Error("All Gemini API keys failed for conflict check");
    }
}
