"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StartedMongoDBContainer = exports.MongoDBContainer = void 0;
const compare_versions_1 = require("compare-versions");
const testcontainers_1 = require("testcontainers");
const MONGODB_PORT = 27017;
class MongoDBContainer extends testcontainers_1.GenericContainer {
    username;
    password;
    constructor(image) {
        super(image);
        this.withExposedPorts(MONGODB_PORT).withWaitStrategy(testcontainers_1.Wait.forHealthCheck()).withStartupTimeout(120_000);
    }
    withUsername(username) {
        if (!username)
            throw new Error("Username should not be empty.");
        this.username = username;
        return this;
    }
    withPassword(password) {
        if (!password)
            throw new Error("Password should not be empty.");
        this.password = password;
        return this;
    }
    async start() {
        const cmdArgs = ["--replSet", "rs0"];
        if (!this.healthCheck)
            this.withWaitForRsHealthCheck();
        if (this.username && this.password) {
            cmdArgs.push("--keyFile", "/data/db/key.txt");
            this.withEnvironment({
                MONGO_INITDB_ROOT_USERNAME: this.username,
                MONGO_INITDB_ROOT_PASSWORD: this.password,
            })
                .withCopyContentToContainer([
                {
                    content: "1111111111",
                    mode: 0o400,
                    target: "/data/db/key.txt",
                },
            ])
                .withCommand(cmdArgs);
        }
        else {
            this.withCommand(cmdArgs);
        }
        return new StartedMongoDBContainer(await super.start(), this.username, this.password);
    }
    withWaitForRsHealthCheck() {
        return this.withHealthCheck({
            test: [
                "CMD-SHELL",
                this.buildMongoEvalCommand(`'try { rs.initiate(); } catch (e){} while (db.runCommand({isMaster: 1}).ismaster==false) { sleep(100); }'`),
            ],
            interval: 250,
            timeout: 60000,
            retries: 1000,
        });
    }
    buildMongoEvalCommand(command) {
        const useMongosh = (0, compare_versions_1.satisfies)(this.imageName.tag, ">=5.0.0");
        const args = [];
        if (useMongosh)
            args.push("mongosh");
        else
            args.push("mongo", "admin");
        if (this.username && this.password)
            args.push("-u", this.username, "-p", this.password);
        args.push("--quiet", "--eval", command);
        return args.join(" ");
    }
}
exports.MongoDBContainer = MongoDBContainer;
class StartedMongoDBContainer extends testcontainers_1.AbstractStartedContainer {
    username;
    password;
    constructor(startedTestContainer, username, password) {
        super(startedTestContainer);
        this.username = username;
        this.password = password;
    }
    getConnectionString() {
        if (this.username && this.password)
            return `mongodb://${this.username}:${this.password}@${this.getHost()}:${this.getMappedPort(MONGODB_PORT)}?authSource=admin`;
        return `mongodb://${this.getHost()}:${this.getMappedPort(MONGODB_PORT)}`;
    }
}
exports.StartedMongoDBContainer = StartedMongoDBContainer;
//# sourceMappingURL=mongodb-container.js.map